import datetime
import discord
from discord.ext import commands
import os

#-------------------------------------------------#
#             Funktionsdefinitionen               #
#                     log()                       #
#-------------------------------------------------#

def log(text):
    return print("[" + datetime.datetime.now().strftime("%H:%M:%S") + "] " + text)

#-------------------------------------------------#
#                cog-Deklaration                  #
#-------------------------------------------------#

async def setup(client):
    await client.add_cog(Utils_Snippet(client))


class Utils_Snippet(commands.Cog):
    def __init__(self, client):
        self.client = client

    @commands.Cog.listener()
    async def on_ready(self):
        log(f"[COGS] Utils_Snippet is ready")

    #-------------------------------------------------#
    #              Snippet-Supercommand               #
    #-------------------------------------------------#

    @commands.command()
    async def snippet(self, ctx, arg1=None, arg2=None):
        if arg1 == "discord.py" or arg1 == "d.py":
            if arg2 == "cog":
                with open("snippets/cog.py", 'r') as file:
                    content = file.read()
                await ctx.reply(f"```py\n{content}\n```", mention_author=False)
            elif arg2 == None:
                raise commands.MissingRequiredArgument(param=commands.Parameter(name='arg2', annotation=str, kind=3))
            else:
                raise commands.BadArgument("Unbekanntes Snippet")
        elif arg1 == None:
            raise commands.MissingRequiredArgument(param=commands.Parameter(name='arg1', annotation=str, kind=3))
        else:
            raise commands.BadArgument("Unbekanntes Snippet")

        
        
        # if arg1 == "sync":
        #     await ctx.send(self.client.user.id)
        #     if arg2 == str(self.client.user.id):
        #         await self.client.tree.sync()

        #         await ctx.message.add_reaction("✅")
        #         embed = discord.Embed(description=f"Es wurde eine Anfrage zur Synchronisation der App-Commands für alle Guilden versendet.\nDie Synchronisation kann einige Minuten bis Stunden dauern.", color=3908961)
        #         embed.set_author(name="Synchronisations-Anfrage versendet", icon_url="https://cdn.discordapp.com/emojis/1233093791657758740.webp")
        #         await ctx.reply(embed = embed, mention_author=False, silent=True, delete_after=10)
                
        #         log(f"[SYNC] Global synchronization of all App-Commands requested. Synchronization can take several minutes to hours.")
        #     elif arg2 == None:
        #         raise commands.MissingRequiredArgument(param=commands.Parameter(name='arg2', annotation=str, kind=3))
        #     else:
        #         raise commands.BadArgument("Falscher Code")
        # elif arg1 == None:
        #     raise commands.MissingRequiredArgument(param=commands.Parameter(name='arg1', annotation=str, kind=3))
        # else:
        #     raise commands.MissingRequiredArgument(param=commands.Parameter(name='arg1', annotation=str, kind=3))